var documenterSearchIndex = {"docs":
[{"location":"#PhotometricFilters","page":"Home","title":"PhotometricFilters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides access to, and operations on, photometric filter curves. Such filter curves are defined by a filter's transmission as a function of wavelength. Transmission and wavelength vectors are therefore the foundation of a filter curve, but it is also important to note whether the filter is used for photon counter or energy counter detectors, as the integrals used to calculate statistics over a filter curve are different between these two types of detectors.","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We use the PhotometricFilter type to represent photometric filters in this package.","category":"page"},{"location":"#PhotometricFilters.PhotometricFilter","page":"Home","title":"PhotometricFilters.PhotometricFilter","text":"PhotometricFilter(wave::AbstractVector, throughput::AbstractVector{T};\n                  detector::DetectorType=Photon(), name::Union{String, Nothing}=nothing)\n\nStruct representing a photometric filter, defined by vectors of wavelengths (wave) and filter throughputs (throughput). wave can have Unitful units attached, otherwise they are assumed to be Å. Optional keyword arguments define the detector type for which the filter is valid and a name to identify the filter.\n\njulia> using PhotometricFilters: PhotometricFilter, Photon, wave, throughput\n\njulia> using Unitful\n\njulia> f = PhotometricFilter(1000:2000, vcat(fill(0.25, 250), fill(0.5, 500), fill(0.25, 251))) # Specify only wavelength and throughput\n1001-element PhotometricFilter{Float64}: nothing\n min. wave.: 1000 Å\n max. wave.: 2000 Å\n effective wave.: 1603.6927025575474 Å\n mean wave.: 1499.8333333333333 Å\n central wave.: 1499.5 Å\n pivot wave.: 1478.1028279485677 Å\n eff. width: 750.0 Å\n fwhm: 501.0 Å\n\njulia> f == PhotometricFilter(uconvert.(Unitful.nm, wave(f)), throughput(f)) # Can also specify wavelength argument with Unitful units\ntrue\n\njulia> f[10] # Indexing into the filter as `f[i]` returns `throughput(f)[i]`\n0.25\n\njulia> f(1001.1) # Calling `f` like a function interpolates the throughput\n0.25\n\njulia> f(100.11 * Unitful.nm) # Can also specify wavelength with units\n0.25\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Users can construct their own filter curvers from raw data using this type.","category":"page"},{"location":"#Accessing-Filter-Curves","page":"Home","title":"Accessing Filter Curves","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We provide a modest collection of filter curves through a data dependency. The available filter curves are accessible via the FILTER_NAMES module constant,","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PhotometricFilters\nPhotometricFilters.FILTER_NAMES |> println","category":"page"},{"location":"","page":"Home","title":"Home","text":"These included filter curves can be accessed like so,","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PhotometricFilters: SDSS_u, SDSS_g, SDSS_r, SDSS_i, SDSS_z, fwhm\nfilts = [SDSS_u(), SDSS_g(), SDSS_r(), SDSS_i(), SDSS_z()]","category":"page"},{"location":"","page":"Home","title":"Home","text":"NOTE THAT THESE INCLUDED FILTER CURVES ARE NOT GUARANTEED TO BE UP-TO-DATE. If you are using a filter/instrument that may have recently had its filter curves updated (e.g., JWST/NIRCAM), you should use our SVO query interface to make sure you get the most up-to-date filter curves. If you know the SVO-designated name of the filter you want, you can use get_filter to retrieve its transmission data, which returns an instance of PhotometricFilter.","category":"page"},{"location":"#PhotometricFilters.get_filter","page":"Home","title":"PhotometricFilters.get_filter","text":"get_filter(filtername::AbstractString, magsys::Symbol=:Vega)\n\nQuery the online SVO filter service for data on a photometric filter.\n\nArguments\n\nfiltername::AbstractString: The desired filter ID, in the correct SVO specification (e.g., \"2MASS/2MASS.J\").\nmagsys::Symbol: Desired magnitude system for associated metadata (e.g., \"ZeroPoint\"). Can be any of (:AB, :Vega, :ST). SVO uses Vega by default, so we mirror that choice here.\n\nReturns\n\nA length-2 tuple, with elements\n\na PhotometricFilter containing the transmission data of the filter.\na dictionary containing additional metadata provided by SVO.\n\nExamples\n\njulia> using PhotometricFilters: get_filter\n\njulia> filt = get_filter(\"2MASS/2MASS.J\", :Vega);\n\njulia> filt[1]\n107-element PhotometricFilter{Float64}: 2MASS/2MASS.J\n min. wave.: 10806.470589792389 Å\n max. wave.: 14067.974683578484 Å\n effective wave.: 12285.654731403807 Å\n mean wave.: 12410.5170694321 Å\n central wave.: 12390.584132888223 Å\n pivot wave.: 12358.089456559974 Å\n eff. width: 1624.3245065600008 Å\n fwhm: 2149.1445403830403 Å\n\njulia> filt[2] isa AbstractDict\ntrue\n\njulia> filt[2][\"ZeroPoint\"]\n1594.0 Jy\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"If you'd like to perform a search on the filters available through the SVO filter service, you can use query_filters.","category":"page"},{"location":"#PhotometricFilters.query_filters","page":"Home","title":"PhotometricFilters.query_filters","text":"query_filters(; queries...)\n\nQueries the filters available from the SVO filter service with search parameters and returns a table of the filters found.\n\nThe available search parameters can be found with PhotometricFilters.get_metadata. The following should be available in general:\n\nWavelengthRef: Tuple of Numbers\nWavelengthMean: Tuple of Numbers\nWavelengthEff: Tuple of Numbers\nWavelengthMin: Tuple of Numbers\nWavelengthMax: Tuple of Numbers\nWidthEff: Tuple of Numbers\nFWHM: Tuple of Numbers\nInstrument: String\nFacility: String\nPhotSystem: String\n\nThe returned table is a DataFrame from the DataFrames package with all the columns of the response VOTable.\n\nThe filter information and transmission data can be obtained by calling get_filter with the ID obtained from the filterID column.\n\nExamples\n\njulia> using DataFrames: DataFrame\n\njulia> df = query_filters(; Facility=\"SLOAN\", WavelengthEff=(1000, 5000));\n\njulia> df isa DataFrame\ntrue\n\njulia> id = df.filterID[3]\n\"SLOAN/SDSS.g\"\n\njulia> get_filter(id)[1] isa PhotometricFilter\ntrue\n\n# Other examples for querying\nquery_filters(; Facility=\"SLOAN\") # all filters from a given facility\nquery_filters(; Instrument=\"BUSCA\", WavelengthEff=(1000u\"angstrom\", 5000u\"angstrom\")) # Unitful wavelengths\n\n\n\n\n\n","category":"function"},{"location":"#Supported-Operations","page":"Home","title":"Supported Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We include functions for performing many common operations on photometric filters, summarized below.","category":"page"},{"location":"#Applying-Filter-Curves-to-Spectra","page":"Home","title":"Applying Filter Curves to Spectra","text":"","category":"section"},{"location":"#PhotometricFilters.apply","page":"Home","title":"PhotometricFilters.apply","text":"apply(f::PhotometricFilter, wave, flux)\n\nUse linear interpolation to map the wavelengths of the photometric filter f to the given wavelengths wave and apply the filter throughput to the flux. The wavelengths of the filter and wave need to be compatible. This means if one has units, the other one needs units, too.\n\njulia> using PhotometricFilters: SDSS_u, wave_unit, apply\n\njulia> f = SDSS_u();\n\njulia> λ = 3000:4000\n3000:4000\n\njulia> flux = fill(1.0, length(λ)); # If `flux` is all `1`, `apply` reduces to `f` interpolated at `λ`\n\njulia> apply(f, λ, flux) == f(λ)\ntrue\n\njulia> λ_u = λ .* wave_unit # Can also put units on λ\n(3000:4000) Å\n\njulia> apply(f, λ_u, flux) == f.(λ_u)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.apply!","page":"Home","title":"PhotometricFilters.apply!","text":"apply!(f::PhotometricFilter, wave, flux, out)\n\nIn-place version of apply which modifies out. It should have a compatible element type with flux.\n\n\n\n\n\n","category":"function"},{"location":"#Statistics","page":"Home","title":"Statistics","text":"","category":"section"},{"location":"#PhotometricFilters.mean_wavelength","page":"Home","title":"PhotometricFilters.mean_wavelength","text":"mean_wavelength(f::PhotometricFilter)\n\nReturns the mean wavelength of the filter f, defined as\n\nfracint lambda  T(lambda)  dlambdaint T(lambda)  dlambda\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.central_wavelength","page":"Home","title":"PhotometricFilters.central_wavelength","text":"central_wavelength(f::PhotometricFilter)\n\nReturns the central wavelength of the filter f, defined as the central wavelength between the two wavelengths used for the FWHM (fwhm).\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.effective_wavelength","page":"Home","title":"PhotometricFilters.effective_wavelength","text":"effective_wavelength(f::PhotometricFilter)\n\nReturns the effective wavelength of the filter f using the Vega spectrum as a standard. Defined as\n\nfracint lambda  T(lambda) textVg(lambda)  dlambdaint T(lambda) textVg(lambda)  dlambda\n\nwhere T(lambda) is the filter transmission at wavelength lambda and textVg(lambda) is the spectrum of Vega.\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.pivot_wavelength","page":"Home","title":"PhotometricFilters.pivot_wavelength","text":"pivot_wavelength(f::PhotometricFilter)\n\nReturns the pivot wavelength of the filter f, defined for filters with Energy detector types as\n\nsqrt fracint T(lambda)  dlambdaint T(lambda)  lambda^2  dlambda \n\nFor filters with Photon detector types, lambda  T(lambda) is substituted for T(lambda) in the above expression.\n\nInternally integration is carried out using trapezoidal integration. It can be convenient to think of this as the \"center of mass\" of the filter.\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.min_wave","page":"Home","title":"PhotometricFilters.min_wave","text":"min_wave(f::PhotometricFilter; level=0.01)\n\nReturns the shortest wavelength at which the filter transmission is equal to level * maximum(transmission).\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.max_wave","page":"Home","title":"PhotometricFilters.max_wave","text":"max_wave(f::PhotometricFilter; level=0.01)\n\nReturns the longest wavelength at which the filter transmission is equal to level * maximum(transmission).\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.fwhm","page":"Home","title":"PhotometricFilters.fwhm","text":"fwhm(f::PhotometricFilter)\n\nReturns the difference between the furthest two wavelengths for which the filter transmission is equal to half its maximum value.\n\n\n\n\n\n","category":"function"},{"location":"#PhotometricFilters.width","page":"Home","title":"PhotometricFilters.width","text":"width(f::PhotometricFilter)\n\nReturns the effective width of the filter, defined as the horizontal size of a rectangle with height equal to the maximum transmission of the filter such that the area of the rectangle is equal to the area under the filter transmission curve. This is calculated as\n\nfracint T(lambda)  dlambdatextmax(T(lambda))\n\n\n\n\n\n","category":"function"},{"location":"#Internal-Functions","page":"Home","title":"Internal Functions","text":"","category":"section"},{"location":"#PhotometricFilters.get_metadata","page":"Home","title":"PhotometricFilters.get_metadata","text":"get_metadata()\n\nReturns a table of the available parameters that can be used to query the SVO filter service from the FORMAT=metadata VOTable they provide.\n\nThe table is a DataFrame from the DataFrames package with the following columns:\n\nparameter: parameter name that can be used for queries using query_filters\nunit: Unitful unit of the parameter\ndatatype: Type of the parameter\ndescription: description of the parameter\nvalues: vector of the possible values that the respective parameter can take on (e.g. for Instrument), or a vector of the minimum and maximum values that the parameter can assume (e.g. for WavelengthEff)\n\nExample\n\njulia> using DataFrames: DataFrame\n\njulia> df = PhotometricFilters.get_metadata();\n\njulia> df isa DataFrame\ntrue\n\njulia> facilities = df[findfirst(==(\"Facility\"), df.parameter), :].values;\n\njulia> facilities isa Vector{String}\ntrue\n\nThis is not exported.\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
