import HDF5
using Unitful

const PYPHOT_DATADEP = DataDep(
    "filters",
    "pyphot filter library",
    "https://rawcdn.githack.com/mfouesneau/pyphot/943b2a5e35c88b4419d5e93a613e44f22994eae3/pyphot/libs/new_filters.hd5",
    "9078486ec989bc0ffddb60f9cda686dff887c5d69627bc4703fd41d78a9e7d46";
)

function read_filter(name::AbstractString, units=true)
    local wave, through, dtype, fname
    HDF5.h5open(datadep"filters/new_filters.hd5") do fh
        node = fh["filters/$name"]
        data = read(node)
        wave = map(i -> i.WAVELENGTH, data)
        if units
            unitstr = read(HDF5.attributes(node)["WAVELENGTH_UNIT"])
            wave *= parse_unit(unitstr)
        end
        through = map(i -> i.THROUGHPUT, data)
        dtype = read(HDF5.attributes(node)["DETECTOR"])
        fname = read(HDF5.attributes(node)["NAME"])
    end
    D = parse(DetectorType, dtype)
    return PhotometricFilter(wave, through; detector=D, name=fname)
end

function parse_unit(unitstr::AbstractString)
    tok = lowercase(unitstr)
    if tok === "angstrom" || tok === "aa"
        return u"angstrom"
    elseif tok === "nm" || tok === "nanometer"
        return u"nm"
    elseif tok === "um"
        return u"Î¼m"
    else
        throw(ArgumentError("Could not parse Unitful unit from $unitstr"))
    end
end

###
### Code generation
###

const FILTER_NAMES = [
    "2MASS_H",
    "2MASS_J",
    "2MASS_Ks",
    "CFHT_CFH12K_CFH7406",
    "CFHT_CFH12K_CFH7504",
    "CFHT_MEGAPRIME_CFH7605",
    "CFHT_MEGAPRIME_CFH7701",
    "CFHT_MEGAPRIME_CFH7803",
    "CFHT_MEGAPRIME_CFH9301",
    "CFHT_MEGAPRIME_CFH9401",
    "CFHT_MEGAPRIME_CFH9601",
    "CFHT_MEGAPRIME_CFH9701",
    "CFHT_MEGAPRIME_CFH9702",
    "CFHT_MEGAPRIME_CFH9801",
    "CFHT_WIRCAM_CFH8002",
    "CFHT_WIRCAM_CFH8101",
    "CFHT_WIRCAM_CFH8102",
    "CFHT_WIRCAM_CFH8103",
    "CFHT_WIRCAM_CFH8104",
    "CFHT_WIRCAM_CFH8201",
    "CFHT_WIRCAM_CFH8202",
    "CFHT_WIRCAM_CFH8203",
    "CFHT_WIRCAM_CFH8204",
    "CFHT_WIRCAM_CFH8301",
    "CFHT_WIRCAM_CFH8302",
    "CFHT_WIRCAM_CFH8303",
    "CFHT_WIRCAM_CFH8304",
    "CFHT_WIRCAM_CFH8305",
    "GALEX_FUV",
    "GALEX_NUV",
    "GROUND_BESSELL_H",
    "GROUND_BESSELL_J",
    "GROUND_BESSELL_K",
    "GROUND_COUSINS_I",
    "GROUND_COUSINS_R",
    "GROUND_JOHNSON_B",
    "GROUND_JOHNSON_U",
    "GROUND_JOHNSON_V",
    "GaiaDR2_BP",
    "GaiaDR2_G",
    "GaiaDR2_RP",
    "GaiaDR2_weiler_BPbright",
    "GaiaDR2_weiler_BPfaint",
    "GaiaDR2_weiler_G",
    "GaiaDR2_weiler_RP",
    "GaiaDR2v2_BP",
    "GaiaDR2v2_G",
    "GaiaDR2v2_RP",
    "Gaia_BP",
    "Gaia_G",
    "Gaia_MAW_BP_bright",
    "Gaia_MAW_BP_faint",
    "Gaia_MAW_G",
    "Gaia_MAW_RP",
    "Gaia_RP",
    "Gaia_rvs",
    "HERSCHEL_PACS_BLUE",
    "HERSCHEL_PACS_GREEN",
    "HERSCHEL_PACS_RED",
    "HERSCHEL_SPIRE_PLW",
    "HERSCHEL_SPIRE_PLW_EXT",
    "HERSCHEL_SPIRE_PMW",
    "HERSCHEL_SPIRE_PSW",
    "HERSCHEL_SPIRE_PSW_EXT",
    "HST_ACS_HRC_F220W",
    "HST_ACS_HRC_F250W",
    "HST_ACS_HRC_F330W",
    "HST_ACS_HRC_F344N",
    "HST_ACS_HRC_F435W",
    "HST_ACS_HRC_F475W",
    "HST_ACS_HRC_F502N",
    "HST_ACS_HRC_F550M",
    "HST_ACS_HRC_F555W",
    "HST_ACS_HRC_F606W",
    "HST_ACS_HRC_F625W",
    "HST_ACS_HRC_F658N",
    "HST_ACS_HRC_F660N",
    "HST_ACS_HRC_F775W",
    "HST_ACS_HRC_F814W",
    "HST_ACS_HRC_F850LP",
    "HST_ACS_HRC_F892N",
    "HST_ACS_WFC_F435W",
    "HST_ACS_WFC_F475W",
    "HST_ACS_WFC_F502N",
    "HST_ACS_WFC_F550M",
    "HST_ACS_WFC_F555W",
    "HST_ACS_WFC_F606W",
    "HST_ACS_WFC_F625W",
    "HST_ACS_WFC_F658N",
    "HST_ACS_WFC_F660N",
    "HST_ACS_WFC_F775W",
    "HST_ACS_WFC_F814W",
    "HST_ACS_WFC_F850LP",
    "HST_ACS_WFC_F892N",
    "HST_NIC2_F110W",
    "HST_NIC2_F160W",
    "HST_NIC2_F205W",
    "HST_NIC3_F108N",
    "HST_NIC3_F110W",
    "HST_NIC3_F113N",
    "HST_NIC3_F150W",
    "HST_NIC3_F160W",
    "HST_NIC3_F164N",
    "HST_NIC3_F166N",
    "HST_NIC3_F175W",
    "HST_NIC3_F187N",
    "HST_NIC3_F190N",
    "HST_NIC3_F196N",
    "HST_NIC3_F200N",
    "HST_NIC3_F205M",
    "HST_NIC3_F212N",
    "HST_NIC3_F215N",
    "HST_NIC3_F222M",
    "HST_NIC3_F240M",
    "HST_WFC3_F098M",
    "HST_WFC3_F105W",
    "HST_WFC3_F110W",
    "HST_WFC3_F125W",
    "HST_WFC3_F126N",
    "HST_WFC3_F127M",
    "HST_WFC3_F128N",
    "HST_WFC3_F130N",
    "HST_WFC3_F132N",
    "HST_WFC3_F139M",
    "HST_WFC3_F140W",
    "HST_WFC3_F153M",
    "HST_WFC3_F160W",
    "HST_WFC3_F164N",
    "HST_WFC3_F167N",
    "HST_WFC3_F200LP",
    "HST_WFC3_F218W",
    "HST_WFC3_F225W",
    "HST_WFC3_F275W",
    "HST_WFC3_F280N",
    "HST_WFC3_F300X",
    "HST_WFC3_F336W",
    "HST_WFC3_F343N",
    "HST_WFC3_F350LP",
    "HST_WFC3_F373N",
    "HST_WFC3_F390M",
    "HST_WFC3_F390W",
    "HST_WFC3_F395N",
    "HST_WFC3_F410M",
    "HST_WFC3_F438W",
    "HST_WFC3_F467M",
    "HST_WFC3_F469N",
    "HST_WFC3_F475W",
    "HST_WFC3_F475X",
    "HST_WFC3_F487N",
    "HST_WFC3_F502N",
    "HST_WFC3_F547M",
    "HST_WFC3_F555W",
    "HST_WFC3_F600LP",
    "HST_WFC3_F606W",
    "HST_WFC3_F621M",
    "HST_WFC3_F625W",
    "HST_WFC3_F631N",
    "HST_WFC3_F645N",
    "HST_WFC3_F656N",
    "HST_WFC3_F657N",
    "HST_WFC3_F658N",
    "HST_WFC3_F665N",
    "HST_WFC3_F673N",
    "HST_WFC3_F680N",
    "HST_WFC3_F689M",
    "HST_WFC3_F763M",
    "HST_WFC3_F775W",
    "HST_WFC3_F814W",
    "HST_WFC3_F845M",
    "HST_WFC3_F850LP",
    "HST_WFC3_F953N",
    "HST_WFC3_FQ232N",
    "HST_WFC3_FQ243N",
    "HST_WFC3_FQ378N",
    "HST_WFC3_FQ387N",
    "HST_WFC3_FQ422M",
    "HST_WFC3_FQ436N",
    "HST_WFC3_FQ437N",
    "HST_WFC3_FQ492N",
    "HST_WFC3_FQ508N",
    "HST_WFC3_FQ575N",
    "HST_WFC3_FQ619N",
    "HST_WFC3_FQ634N",
    "HST_WFC3_FQ672N",
    "HST_WFC3_FQ674N",
    "HST_WFC3_FQ727N",
    "HST_WFC3_FQ750N",
    "HST_WFC3_FQ889N",
    "HST_WFC3_FQ906N",
    "HST_WFC3_FQ924N",
    "HST_WFC3_FQ937N",
    "HST_WFPC2_F170W",
    "HST_WFPC2_F218W",
    "HST_WFPC2_F255W",
    "HST_WFPC2_F300W",
    "HST_WFPC2_F336W",
    "HST_WFPC2_F439W",
    "HST_WFPC2_F450W",
    "HST_WFPC2_F555W",
    "HST_WFPC2_F606W",
    "HST_WFPC2_F622W",
    "HST_WFPC2_F675W",
    "HST_WFPC2_F791W",
    "HST_WFPC2_F814W",
    "HST_WFPC2_F850LP",
    "JWST_NIRCAM_F070W",
    "JWST_NIRCAM_F090W",
    "JWST_NIRCAM_F115W",
    "JWST_NIRCAM_F140M",
    "JWST_NIRCAM_F150W",
    "JWST_NIRCAM_F150W2",
    "JWST_NIRCAM_F162M",
    "JWST_NIRCAM_F164N",
    "JWST_NIRCAM_F182M",
    "JWST_NIRCAM_F187N",
    "JWST_NIRCAM_F200W",
    "JWST_NIRCAM_F210M",
    "JWST_NIRCAM_F212N",
    "JWST_NIRCAM_F250M",
    "JWST_NIRCAM_F277W",
    "JWST_NIRCAM_F300M",
    "JWST_NIRCAM_F322W2",
    "JWST_NIRCAM_F323N",
    "JWST_NIRCAM_F335M",
    "JWST_NIRCAM_F356W",
    "JWST_NIRCAM_F360M",
    "JWST_NIRCAM_F405N",
    "JWST_NIRCAM_F410M",
    "JWST_NIRCAM_F430M",
    "JWST_NIRCAM_F444W",
    "JWST_NIRCAM_F460M",
    "JWST_NIRCAM_F466N",
    "JWST_NIRCAM_F470N",
    "JWST_NIRCAM_F480M",
    "KEPLER_Kp",
    "NGTS_I",
    "PS1_g",
    "PS1_i",
    "PS1_r",
    "PS1_w",
    "PS1_y",
    "PS1_z",
    "SDSS_g",
    "SDSS_i",
    "SDSS_r",
    "SDSS_u",
    "SDSS_z",
    "SPITZER_IRAC_36",
    "SPITZER_IRAC_45",
    "SPITZER_IRAC_58",
    "SPITZER_IRAC_80",
    "STROMGREN_b",
    "STROMGREN_u",
    "STROMGREN_v",
    "STROMGREN_y",
    "TESS",
    "TYCHO_B_MvB",
    "TYCHO_V_MvB",
    "WISE_RSR_W1",
    "WISE_RSR_W2",
    "WISE_RSR_W3",
    "WISE_RSR_W4",
    "ZTF_g",
    "ZTF_i",
    "ZTF_r"
]

for filter_name in FILTER_NAMES
    F = Symbol(filter_name)
    @eval $F(; units=true) = read_filter($filter_name, units)
end
